#!/bin/bash
#===================================================================================
# ASCII COUNTDOWN TIMER
#         FILE: countdown
#        USAGE: countdown [UNTIL-HOUR] [FROM-HOUR]
#
#  DESCRIPTION: Show a countdown timer in ASCII
#
#       AUTHOR: Leonardo Marco (labadmin@leonardomarco.com)
#	   LICENSE: GNU General Public License v3.0
#      CREATED: 19.10.2019
#===================================================================================

# BANNER CONIFG
banner1="EXAM TIME!"
banner2="KEEP CALM AND FOCUS"



#=== FUNCTION ==================================================================
# NAME: print_centered
# DESCRIPTION: print text in teminal centered
# PARAMETERS
#	$1	text to print
# [$2]	horizontal line to start printing
#===============================================================================
function print_centered() {
	text="$1"
	start_line="$2"
	[ "$start_line" ] && tput cup "$start_line" 0
	# Get text width (only from first line and exclude special format characters)
	width=$(echo -n "$text" | head -1 | tr -d '\n' | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | wc -m)
	tab=$((($(tput cols)-$width)/2))
	[ "$tab" -lt 0 ] && tab=0

	echo "$text" | while read; do
		echo -en "\e[${tab}C"
		echo "${REPLY} "		# REPLY var dont delete space chars at begin
	done
}


#=== FUNCTION ==================================================================
# NAME: hhmmss_format
# DESCRIPTION: convert number of seconds to hh:mm:ss format
# PARAMETERS
#	$1	number of seconds to convert
#===============================================================================
function hhmmss_format() {
	local t="$1"
	[ "$t" -lt 0 ] && t=$((t*-1))
	local h=$((t/(60*60)))
	t=$((t-h*60*60))
	local m=$((t/60))
	t=$((t-m*60))
	local s=$t
	printf "%02d:%02d:%02d" "$h" "$m" "$s"
}


#=== FUNCTION ==================================================================
# NAME: bar
# DESCRIPTION: print bar with percentaje 
# PARAMETERS
#	$1	percentaje to draw
#===============================================================================
function progress_bar() {
	local percent="$1"
	local total="$(($(tput cols)-10))"
	local current=$((total*percent/100))
	local pending=$((total-current))
	local color="\e[91m"
	[ "$percent" -lt 85 ] && color="\e[33m"
	[ "$percent" -lt 50 ] && color="\e[92m" 
	echo -en "$color"; seq -s "█" 0 $current | tr -d "[0-9\n]"; echo -en "\e[0m"; seq -s "▒" 0 $pending | tr -d "[0-9\n]"; echo
	echo -en "$color"; seq -s "█" 0 $current | tr -d "[0-9\n]"; echo -en "\e[0m"; seq -s "▒" 0 $pending | tr -d "[0-9\n]"; echo
	echo -en "$color"; seq -s "█" 0 $current | tr -d "[0-9\n]"; echo -en "\e[0m"; seq -s "▒" 0 $pending | tr -d "[0-9\n]"; echo
	seq -s " " 1 $(($current-1-2*$percent/100)) | tr -d "[0-9\n]"; echo "${percent}%"
}


#=== FUNCTION ==================================================================
# NAME: cursor_hide
# DESCRIPTION: hides cursor
#===============================================================================
function cursor_hide() {
	tput civis					# Hide cursor
	stty -echo &> /dev/null		# Avoid keyboard write
}

#=== FUNCTION ==================================================================
# NAME: cursor_show
# DESCRIPTION: show cursor
#===============================================================================
function cursor_show() {
	tput cvvis					# Show cursor
	stty echo &> /dev/null		# Allow keyboard write
	tput cup $l 0
}


#=== FUNCTION ==================================================================
# NAME: ring
# DESCRIPTION: ring from pc spekaer
#===============================================================================
function ring() {
	which beep &>/dev/null || return 1
	modprobe pcspkr &>/dev/null || return 1
	for n in 1 2 3 ; do for f in 1 2 1 2 1 2 1 2 1 2 ; do beep -f ${f}000 -l 10; done; done
}


#=== FUNCTION ==================================================================
# NAME: print_background
# DESCRIPTION: print border and banners
#===============================================================================
function print_background() {
	clear
	l="$(tput lines)"
	c="$(tput cols)"

	# Draw border
	echo
	echo " ┌$(seq -s "─" 1 $((c-3)) | tr -d "[0-9]")┐ "
	for ((i=0; i<$l-4;i++)); do
		echo " │$(seq -s " " 1 $((c-3)) | tr -d "[0-9]")│ "
	done
	echo " └$(seq -s "─" 1 $((c-3)) | tr -d "[0-9]")┘ "

	print_centered "$(toilet -f future "$banner1")" 5
	print_centered "$banner2" 8
}


#=== FUNCTION ==================================================================
# NAME: check_terminal_size
# DESCRIPTION: checks if terminal size (lines and columns) are ok
# EXIT CODE
#	0	if ok
#	1	if not ok
#===============================================================================
function check_terminal_size() {
	local r=0
	if [ "$l" -lt 25 ]; then
		clear
		echo "minimun screen lines must be 25" 1>&2
		return 1
	elif [ "$c" -lt 45 ]; then
		clear
		echo "minimun screen columns must be 45" 1>&2
		return 1
	fi
	return 0
}


#=== FUNCTION ==================================================================
# NAME: help
# DESCRIPTION: show help and exit
# PARAMETERS
#	[$1]	exit code
#===============================================================================
function help() {
	echo -e "Usage: \e[1m$(basename $0)\e[0m [UNTIL-HOUR] [FROM-HOUR]"
	echo -e "Samples:"
	echo -e "  \e[1m$(basename $0)\e[0m\t\tOnly show current time"
	echo -e "  \e[1m$(basename $0) 10:32\e[0m\tStart countdown from current time to 10:32"
	echo -e "  \e[1m$(basename $0) 10:32 9:00\e[0m\tContinue countdown from 9:00 to 10:32"
	[ "$1" ] && exit "$1" || exit 0
}




#=== FUNCTION ==================================================================
# NAME: main
# DESCRIPTION: start funcion when exec script
# PARAMETERS
#	$@	all script parameters
#===============================================================================
function main() {
	# Check if help
	[ "$1" = "-h" ] && help

	# CHECK PARAMETERS
	until="$1"
	from="$2"
	[ ! "$from" ] && from="$(date +"%H:%M:%S")"
	date -d"$(date +%Y-%m-%d) $until" &>/dev/null || { echo "$until: Incorrect hour format (hh:mm[:ss])" 1>&2; exit 1; }
	date -d"$(date +%Y-%m-%d) $from" &>/dev/null || { echo "$from: Incorrect hour format (hh:mm[:ss])"  1>&2; exit 1; }
	duntil="$(date -d"$(date +%Y-%m-%d) $until" +%s)"
	dfrom="$(date -d"$(date +%Y-%m-%d) $from" +%s)"

	# CHECK DEPENDENCES
	! which tput &>/dev/null   && {	echo "tput command not found!" 1>&2; 	exit 1; }
	! which toilet &>/dev/null && { echo "toilet command not found!" 1>&2;	exit 1; }

	# INITIALIZE
	cursor_hide
	trap 'cursor_show; exit 0' INT TERM HUP

	# MAIN LOOP
	while true; do
		# Check if terminal size has changed:
		([ "$c" != "$(tput cols)" ] || [ "$l" != "$(tput lines)" ]) && print_background
		# Check minimun lines and columns
		check_terminal_size || { sleep 1; continue; }


		# Get current percentage
		dnow="$(date +%s)"
		percent=$(( (dnow-dfrom)*100/(duntil-dfrom) ))

		# Check overflow and underflow percentage
		[ "$until" ] && if [ "$percent" -lt 0 ] || [ "$percent" -ge 100 ] || [ "$((duntil-dfrom))" -lt 0 ]; then
			percent=100
			echo -e "\e[91m"
		fi

		# Ring!
		if  [ "$percent" -ge 100 ] || \
		   ([ "$percent" -ge 85 ] && [ $(($dnow%(60*5))) -eq 0 ]) || \
		   ([ "$percent" -ge 95 ] && [ $(($dnow%30)) -eq 0 ])
		then 
			ring &
		fi
		
		# Print current timer and bar
		rc=$(hhmmss_format $((duntil-dnow)) )				# Remaining countdown
		print_centered "$(toilet -f future "$rc")" 14
		[ "$until" ] && print_centered "$(progress_bar $percent)" 18

		sleep 1		
	done
}


main $@




